!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
D_	ex1/lib/jsonlab/saveubjson.m	/^function val=D_(num)$/;"	f
D_a	ex1/lib/jsonlab/saveubjson.m	/^function data=D_a(num,type,dim,format)$/;"	f
I_	ex1/lib/jsonlab/saveubjson.m	/^function val=I_(num)$/;"	f
I_a	ex1/lib/jsonlab/saveubjson.m	/^function data=I_a(num,type,dim,format)$/;"	f
S_	ex1/lib/jsonlab/saveubjson.m	/^function val=S_(str)$/;"	f
cell2json	ex1/lib/jsonlab/savejson.m	/^function txt=cell2json(name,item,level,varargin)$/;"	f
cell2ubjson	ex1/lib/jsonlab/saveubjson.m	/^function txt=cell2ubjson(name,item,level,varargin)$/;"	f
checkname	ex1/lib/jsonlab/savejson.m	/^function newname=checkname(name,varargin)$/;"	f
checkname	ex1/lib/jsonlab/saveubjson.m	/^function newname=checkname(name,varargin)$/;"	f
computeCost	ex1/computeCost.m	/^function J = computeCost(X, y, theta)$/;"	f
computeCostMulti	ex1/computeCostMulti.m	/^function J = computeCostMulti(X, y, theta)$/;"	f
data2byte	ex1/lib/jsonlab/saveubjson.m	/^function bytes=data2byte(varargin)$/;"	f
elem_info	ex1/lib/jsonlab/loadubjson.m	/^function [cid,len]=elem_info(type)$/;"	f
error_pos	ex1/lib/jsonlab/loadjson.m	/^function error_pos(msg)$/;"	f
error_pos	ex1/lib/jsonlab/loadubjson.m	/^function error_pos(msg)$/;"	f
escapejsonstring	ex1/lib/jsonlab/savejson.m	/^function newstr=escapejsonstring(str)$/;"	f
featureNormalize	ex1/featureNormalize.m	/^function [X_norm, mu, sigma] = featureNormalize(X)$/;"	f
getResponse	ex1/lib/submitWithConfiguration.m	/^function response = getResponse(url, body)$/;"	f
gradientDescent	ex1/gradientDescent.m	/^function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)$/;"	f
gradientDescentMulti	ex1/gradientDescentMulti.m	/^function [theta, J_history] = gradientDescentMulti(X, y, theta, alpha, num_iters)$/;"	f
isValidPartOptionIndex	ex1/lib/submitWithConfiguration.m	/^function isValid = isValidPartOptionIndex(partOptions, i)$/;"	f
jcell2array	ex1/lib/jsonlab/loadjson.m	/^function newdata=jcell2array(data)$/;"	f
jcell2array	ex1/lib/jsonlab/loadubjson.m	/^function newdata=jcell2array(data)$/;"	f
jsonopt	ex1/lib/jsonlab/jsonopt.m	/^function val=jsonopt(key,default,varargin)$/;"	f
jstruct2array	ex1/lib/jsonlab/loadjson.m	/^function newdata=jstruct2array(data)$/;"	f
jstruct2array	ex1/lib/jsonlab/loadubjson.m	/^function newdata=jstruct2array(data)$/;"	f
loadjson	ex1/lib/jsonlab/loadjson.m	/^function data = loadjson(fname,varargin)$/;"	f
loadubjson	ex1/lib/jsonlab/loadubjson.m	/^function data = loadubjson(fname,varargin)$/;"	f
makePartsStruct	ex1/lib/submitWithConfiguration.m	/^function partsStruct = makePartsStruct(conf, parts)$/;"	f
makePostBody	ex1/lib/submitWithConfiguration.m	/^function body = makePostBody(conf, email, token, parts)$/;"	f
makeValidFieldName	ex1/lib/makeValidFieldName.m	/^function str = makeValidFieldName(str)$/;"	f
mat2json	ex1/lib/jsonlab/savejson.m	/^function txt=mat2json(name,item,level,varargin)$/;"	f
mat2ubjson	ex1/lib/jsonlab/saveubjson.m	/^function txt=mat2ubjson(name,item,level,varargin)$/;"	f
matching_bracket	ex1/lib/jsonlab/loadjson.m	/^function [endpos, e1l, e1r, maxlevel] = matching_bracket(str,pos)$/;"	f
matching_bracket	ex1/lib/jsonlab/loadubjson.m	/^function [endpos e1l e1r maxlevel] = matching_bracket(str,pos)$/;"	f
matching_quote	ex1/lib/jsonlab/loadjson.m	/^function endpos = matching_quote(str,pos)$/;"	f
matching_quote	ex1/lib/jsonlab/loadubjson.m	/^function endpos = matching_quote(str,pos)$/;"	f
matdata2json	ex1/lib/jsonlab/savejson.m	/^function txt=matdata2json(mat,level,varargin)$/;"	f
matdata2ubjson	ex1/lib/jsonlab/saveubjson.m	/^function txt=matdata2ubjson(mat,level,varargin)$/;"	f
mergestruct	ex1/lib/jsonlab/mergestruct.m	/^function s=mergestruct(s1,s2)$/;"	f
next_char	ex1/lib/jsonlab/loadjson.m	/^function c = next_char$/;"	f
next_char	ex1/lib/jsonlab/loadubjson.m	/^function c = next_char$/;"	f
normalEqn	ex1/normalEqn.m	/^function [theta] = normalEqn(X, y)$/;"	f
obj2json	ex1/lib/jsonlab/savejson.m	/^function txt=obj2json(name,item,level,varargin)$/;"	f
obj2ubjson	ex1/lib/jsonlab/saveubjson.m	/^function txt=obj2ubjson(name,item,level,varargin)$/;"	f
output	ex1/submit.m	/^function out = output(partId)$/;"	f
parseStr	ex1/lib/jsonlab/loadjson.m	/^function str = parseStr(varargin)$/;"	f
parseStr	ex1/lib/jsonlab/loadubjson.m	/^function str = parseStr(varargin)$/;"	f
parse_array	ex1/lib/jsonlab/loadjson.m	/^function object = parse_array(varargin) % JSON array is written in row-major order$/;"	f
parse_array	ex1/lib/jsonlab/loadubjson.m	/^function object = parse_array(varargin) % JSON array is written in row-major order$/;"	f
parse_block	ex1/lib/jsonlab/loadubjson.m	/^function [data adv]=parse_block(type,count,varargin)$/;"	f
parse_char	ex1/lib/jsonlab/loadjson.m	/^function parse_char(c)$/;"	f
parse_char	ex1/lib/jsonlab/loadubjson.m	/^function parse_char(c)$/;"	f
parse_collection	ex1/lib/jsonlab/loadubjson.m	/^function newdata=parse_collection(id,data,obj)$/;"	f
parse_number	ex1/lib/jsonlab/loadjson.m	/^function num = parse_number(varargin)$/;"	f
parse_number	ex1/lib/jsonlab/loadubjson.m	/^function num = parse_number(varargin)$/;"	f
parse_object	ex1/lib/jsonlab/loadjson.m	/^function object = parse_object(varargin)$/;"	f
parse_object	ex1/lib/jsonlab/loadubjson.m	/^function object = parse_object(varargin)$/;"	f
parse_value	ex1/lib/jsonlab/loadjson.m	/^function val = parse_value(varargin)$/;"	f
parse_value	ex1/lib/jsonlab/loadubjson.m	/^function val = parse_value(varargin)$/;"	f
parts	ex1/lib/submitWithConfiguration.m	/^function [parts] = parts(conf)$/;"	f
plotData	ex1/plotData.m	/^function plotData(x, y)$/;"	f
printHTMLContents	ex1/lib/submitWithConfiguration.m	/^function printHTMLContents(response)$/;"	f
promptToken	ex1/lib/submitWithConfiguration.m	/^function [email token] = promptToken(email, existingToken, tokenFile)$/;"	f
savejson	ex1/lib/jsonlab/savejson.m	/^function json=savejson(rootname,obj,varargin)$/;"	f
saveubjson	ex1/lib/jsonlab/saveubjson.m	/^function json=saveubjson(rootname,obj,varargin)$/;"	f
showFeedback	ex1/lib/submitWithConfiguration.m	/^function showFeedback(parts, response)$/;"	f
skip_whitespace	ex1/lib/jsonlab/loadjson.m	/^function skip_whitespace$/;"	f
skip_whitespace	ex1/lib/jsonlab/loadubjson.m	/^function skip_whitespace$/;"	f
str2json	ex1/lib/jsonlab/savejson.m	/^function txt=str2json(name,item,level,varargin)$/;"	f
str2ubjson	ex1/lib/jsonlab/saveubjson.m	/^function txt=str2ubjson(name,item,level,varargin)$/;"	f
struct2json	ex1/lib/jsonlab/savejson.m	/^function txt=struct2json(name,item,level,varargin)$/;"	f
struct2ubjson	ex1/lib/jsonlab/saveubjson.m	/^function txt=struct2ubjson(name,item,level,varargin)$/;"	f
submissionUrl	ex1/lib/submitWithConfiguration.m	/^function submissionUrl = submissionUrl()$/;"	f
submit	ex1/submit.m	/^function submit()$/;"	f
submitParts	ex1/lib/submitWithConfiguration.m	/^function response = submitParts(conf, email, token, parts)$/;"	f
submitWithConfiguration	ex1/lib/submitWithConfiguration.m	/^function submitWithConfiguration(conf)$/;"	f
valid_field	ex1/lib/jsonlab/loadjson.m	/^function str = valid_field(str)$/;"	f
valid_field	ex1/lib/jsonlab/loadubjson.m	/^function str = valid_field(str)$/;"	f
validateResponse	ex1/lib/submitWithConfiguration.m	/^function response = validateResponse(resp)$/;"	f
varargin2struct	ex1/lib/jsonlab/varargin2struct.m	/^function opt=varargin2struct(varargin)$/;"	f
warmUpExercise	ex1/warmUpExercise.m	/^function A = warmUpExercise()$/;"	f
